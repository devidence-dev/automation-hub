name: Deploy to Raspberry Pi

on:
  workflow_dispatch: # Only manual execution
  workflow_run:
    workflows: ["üöÄ CI/CD Pipeline"]
    types:
      - completed
    branches:
      - master
      - main

env:
  # Public variables (visible in the code)
  BRANCH_NAME: ${{ github.ref_name }} # Updated to use the actual branch name dynamically
  # Organization variables
  DEPLOY_PATH: ${{ vars.DEPLOY_BASE_PATH }}/${{ github.event.repository.name }}

jobs:
  deploy:
    name: Deploy to Production
    runs-on: self-hosted # Only one self-hosted runner available
    # environment: production # Temporarily disabled to test
    # if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Fetch latest changes
        run: |
          cd ${{ env.DEPLOY_PATH }}
          # Temporarily use HTTPS for fetch
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git fetch origin
          # Restore SSH remote
          git remote set-url origin git@github.com:${{ github.repository }}.git

      - name: Reset to latest branch
        run: |
          cd ${{ env.DEPLOY_PATH }}
          git reset --hard origin/${{ env.BRANCH_NAME }}

      - name: Generate config.yaml from secrets
        run: |
          cd ${{ env.DEPLOY_PATH }}
          echo "üìù Generating config.yaml from template..."

          # Copy template
          cp configs/config.yaml.example configs/config.yaml

          # Replace placeholders with variables (non-sensitive)
          sed -i 's|{{EMAIL_HOST}}|${{ vars.EMAIL_HOST }}|g' configs/config.yaml
          sed -i 's|{{EMAIL_PORT}}|${{ vars.EMAIL_PORT }}|g' configs/config.yaml
          sed -i 's|{{EMAIL_USERNAME}}|${{ vars.EMAIL_USERNAME }}|g' configs/config.yaml

          # Replace placeholders with secrets (sensitive)
          sed -i 's|{{TELEGRAM_BOT_TOKEN}}|${{ secrets.TELEGRAM_BOT_TOKEN }}|g' configs/config.yaml
          sed -i 's|{{EMAIL_PASSWORD}}|${{ secrets.EMAIL_PASSWORD }}|g' configs/config.yaml
          sed -i 's|{{TELEGRAM_CLOUDFLARE_CHAT_ID}}|${{ secrets.TELEGRAM_CLOUDFLARE_CHAT_ID }}|g' configs/config.yaml
          sed -i 's|{{TELEGRAM_PERPLEXITY_CHAT_ID}}|${{ secrets.TELEGRAM_PERPLEXITY_CHAT_ID }}|g' configs/config.yaml
          sed -i 's|{{TELEGRAM_QBITTORRENT_CHAT_ID}}|${{ secrets.TELEGRAM_QBITTORRENT_CHAT_ID }}|g' configs/config.yaml

          # Set proper permissions
          sudo chown 1000:1000 configs/config.yaml
          sudo chmod 644 configs/config.yaml
          echo "‚úÖ config.yaml generated successfully"

      - name: Validate configuration file
        run: |
          cd ${{ env.DEPLOY_PATH }}
          echo "üîç Validating config.yaml..."
          if awk '!/^[[:space:]]*#/' configs/config.yaml | grep -q '{{'; then
            echo "‚ùå Error: Placeholders not replaced in config.yaml"
            cat configs/config.yaml
            exit 1
          fi
          echo "‚úÖ Config validation passed"

      - name: Verify configuration file exists
        run: |
          cd ${{ env.DEPLOY_PATH }}
          echo "‚úÖ config.yaml generated from secrets"
          echo "üìã Config directory contents:"
          ls -la configs/

          # Update docker-compose files to use absolute paths (no variables)
          echo "üìù Updating compose files with absolute paths..."
          sed -i 's|\${PWD}/configs|${{ env.DEPLOY_PATH }}/configs|g' docker-compose.yml
          if [ -f docker-compose.override.yml ]; then
            sed -i 's|\${PWD}/configs|${{ env.DEPLOY_PATH }}/configs|g' docker-compose.override.yml
          fi
          echo "‚úÖ Compose files updated"

      - name: Stop running containers
        run: |
          cd ${{ env.DEPLOY_PATH }}
          sudo docker compose -f ${{ env.DEPLOY_PATH }}/docker-compose.yml down
        continue-on-error: true

      - name: Build Docker image
        run: |
          cd ${{ env.DEPLOY_PATH }}
          sudo docker compose -f ${{ env.DEPLOY_PATH }}/docker-compose.yml build --no-cache

      - name: Start containers
        run: |
          cd ${{ env.DEPLOY_PATH }}
          sudo docker compose -f ${{ env.DEPLOY_PATH }}/docker-compose.yml up -d

      - name: Clean up old Docker images
        run: sudo docker image prune -f
        continue-on-error: true

      - name: Show container status
        run: |
          cd ${{ env.DEPLOY_PATH }}
          sudo docker compose -f ${{ env.DEPLOY_PATH }}/docker-compose.yml ps
        continue-on-error: true

      - name: Debug - Check config inside container
        run: |
          echo "üìã Checking config file inside container..."
          sudo docker exec automation-hub-prod ls -la /app/ || true
          echo "üìÑ Checking if config.yaml is readable..."
          sudo docker exec automation-hub-prod head -10 /app/config.yaml || true
          echo "üìä Container logs:"
          sudo docker logs --tail 50 automation-hub-prod || true
          echo "üìà Container status:"
          sudo docker ps -a --filter name=automation-hub-prod --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" || true
        continue-on-error: true
