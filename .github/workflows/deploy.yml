name: Deploy to Raspberry Pi

on:
  workflow_dispatch: # Only manual execution
  workflow_run:
    workflows: ["🚀 CI/CD Pipeline"]
    types:
      - completed
    branches:
      - master
      - main

env:
  # Public variables (visible in the code)
  BRANCH_NAME: ${{ github.ref_name }} # Updated to use the actual branch name dynamically
  # Organization variables
  DEPLOY_PATH: ${{ vars.DEPLOY_BASE_PATH }}/${{ github.event.repository.name }}

jobs:
  deploy:
    name: Deploy to Production
    runs-on: self-hosted # Only one self-hosted runner available
    # environment: production # Temporarily disabled to test
    # if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Fetch latest changes
        run: |
          cd ${{ env.DEPLOY_PATH }}
          # Temporarily use HTTPS for fetch
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git fetch origin
          # Restore SSH remote
          git remote set-url origin git@github.com:${{ github.repository }}.git

      - name: Reset to latest branch
        run: |
          cd ${{ env.DEPLOY_PATH }}
          git reset --hard origin/${{ env.BRANCH_NAME }}

      - name: Verify configuration file exists
        run: |
          cd ${{ env.DEPLOY_PATH }}
          if [ ! -f configs/config.yaml ]; then
            echo "⚠️  Warning: config.yaml not found. Creating from example..."
            echo "⚠️  Remember to update it with your actual values!"
            cp configs/config.yaml.example configs/config.yaml
          else
            echo "✅ config.yaml found"
          fi
          # Ensure proper permissions for container user (1000:1000)
          sudo chown -R 1000:1000 configs/
          sudo chmod 644 configs/config.yaml
          echo "📋 Config directory contents:"
          ls -la configs/

          # Create temporary .env file for docker-compose
          echo "PWD=${{ env.DEPLOY_PATH }}" > .env.deploy
          chmod 644 .env.deploy
          echo "📄 Created .env.deploy file with content:"
          cat .env.deploy
          echo "📍 File location and permissions:"
          ls -la .env.deploy

      - name: Stop running containers
        run: |
          cd ${{ env.DEPLOY_PATH }}
          echo "🔍 Verifying .env.deploy exists:"
          ls -la .env.deploy
          sudo docker compose --env-file ${{ env.DEPLOY_PATH }}/.env.deploy -f ${{ env.DEPLOY_PATH }}/docker-compose.yml down
        continue-on-error: true # Continue even if it fails (in case there are no running containers)

      - name: Build Docker image
        run: |
          cd ${{ env.DEPLOY_PATH }}
          sudo docker compose --env-file ${{ env.DEPLOY_PATH }}/.env.deploy -f ${{ env.DEPLOY_PATH }}/docker-compose.yml build --no-cache

      - name: Start containers
        run: |
          cd ${{ env.DEPLOY_PATH }}
          echo "📄 Using .env.deploy file with content:"
          cat .env.deploy
          sudo docker compose --env-file ${{ env.DEPLOY_PATH }}/.env.deploy -f ${{ env.DEPLOY_PATH }}/docker-compose.yml up -d

      - name: Clean up old Docker images
        run: sudo docker image prune -f
        continue-on-error: true

      - name: Show container status
        run: |
          cd ${{ env.DEPLOY_PATH }}
          sudo docker compose --env-file ${{ env.DEPLOY_PATH }}/.env.deploy -f ${{ env.DEPLOY_PATH }}/docker-compose.yml ps
        continue-on-error: true

      - name: Debug - Check config inside container
        run: |
          echo "📋 Checking config file inside container..."
          sudo docker exec automation-hub-prod ls -la /app/configs/ || true
          echo "📄 Checking if config.yaml is readable..."
          sudo docker exec automation-hub-prod head -5 /app/configs/config.yaml || true
          echo "📊 Container logs:"
          sudo docker logs --tail 20 automation-hub-prod || true
          echo "🔍 Checking docker-compose.yml volumes:"
          grep -A 5 "volumes:" docker-compose.yml || true
          if [ -f docker-compose.override.yml ]; then
            echo "🔍 Checking docker-compose.override.yml volumes:"
            grep -A 5 "volumes:" docker-compose.override.yml || true
          fi
        continue-on-error: true

      - name: Clean up temporary env file
        run: |
          cd ${{ env.DEPLOY_PATH }}
          rm -f .env.deploy
          echo "✅ Cleaned up .env.deploy file"
        continue-on-error: true
