name: Deploy to Raspberry Pi

on:
  workflow_dispatch:
    inputs:
      ci_commit_sha:
        description: "SHA del commit del CI exitoso"
        required: true

env:
  # Public variables (visible in the code)
  BRANCH_NAME: ${{ github.ref_name }} # Updated to use the actual branch name dynamically
  IMAGE_VERSION: "1.0.0"
  # Organization variables
  DEPLOY_PATH: ${{ vars.DEPLOY_BASE_PATH }}/${{ github.event.repository.name }}

jobs:
  deploy:
    name: Deploy to Production
    runs-on: self-hosted # Only one self-hosted runner available
    # environment: production # Temporarily disabled to test
    # if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Fetch latest changes
        run: |
          cd ${{ env.DEPLOY_PATH }}
          # Temporarily use HTTPS for fetch
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git fetch origin
          # Restore SSH remote
          git remote set-url origin git@github.com:${{ github.repository }}.git

      - name: Reset to latest branch
        run: |
          cd ${{ env.DEPLOY_PATH }}
          git reset --hard origin/${{ env.BRANCH_NAME }}

      - name: Generate config.yaml from secrets
        run: |
          cd ${{ env.DEPLOY_PATH }}
          echo "üìù Generating config.yaml from template..."

          # Copy template
          cp configs/config.yaml.example configs/config.yaml

          # Replace placeholders with variables (non-sensitive)
          sed -i 's|{{EMAIL_HOST}}|${{ vars.EMAIL_HOST }}|g' configs/config.yaml
          sed -i 's|{{EMAIL_PORT}}|${{ vars.EMAIL_PORT }}|g' configs/config.yaml
          sed -i 's|{{EMAIL_USERNAME}}|${{ vars.EMAIL_USERNAME }}|g' configs/config.yaml

          # Replace placeholders with secrets (sensitive)
          sed -i 's|{{TELEGRAM_BOT_TOKEN}}|${{ secrets.TELEGRAM_BOT_TOKEN }}|g' configs/config.yaml
          sed -i 's|{{EMAIL_PASSWORD}}|${{ secrets.EMAIL_PASSWORD }}|g' configs/config.yaml
          sed -i 's|{{TELEGRAM_CLOUDFLARE_CHAT_ID}}|${{ secrets.TELEGRAM_CLOUDFLARE_CHAT_ID }}|g' configs/config.yaml
          sed -i 's|{{TELEGRAM_PERPLEXITY_CHAT_ID}}|${{ secrets.TELEGRAM_PERPLEXITY_CHAT_ID }}|g' configs/config.yaml
          sed -i 's|{{TELEGRAM_QBITTORRENT_CHAT_ID}}|${{ secrets.TELEGRAM_QBITTORRENT_CHAT_ID }}|g' configs/config.yaml

          # Set proper permissions
          sudo chown 1000:1000 configs/config.yaml
          sudo chmod 644 configs/config.yaml
          echo "‚úÖ config.yaml generated successfully"

      - name: Validate configuration file
        run: |
          cd ${{ env.DEPLOY_PATH }}
          echo "üîç Validating config.yaml..."
          if awk '!/^[[:space:]]*#/' configs/config.yaml | grep -q '{{'; then
            echo "‚ùå Error: Placeholders not replaced in config.yaml"
            cat configs/config.yaml
            exit 1
          fi
          echo "‚úÖ Config validation passed"

      - name: Stop running containers
        run: |
          cd ${{ env.DEPLOY_PATH }}
          sudo docker compose -f ${{ env.DEPLOY_PATH }}/docker-compose.yml down
        continue-on-error: true

      - name: Build Docker image
        run: |
          cd ${{ env.DEPLOY_PATH }}
          sudo docker build -t automation-hub:${IMAGE_VERSION} --no-cache -f ${{ env.DEPLOY_PATH }}/deployments/docker/Dockerfile --platform linux/arm64 ${{ env.DEPLOY_PATH }}

      - name: Start containers
        run: |
          cd ${{ env.DEPLOY_PATH }}
          sudo docker compose -f ${{ env.DEPLOY_PATH }}/docker-compose.yml -f ${{ env.DEPLOY_PATH }}/docker-compose.override.yml up -d

      - name: Clean up old Docker images
        run: sudo docker image prune -f
        continue-on-error: true

      - name: Validate deployment
        run: |
          cd ${{ env.DEPLOY_PATH }}
          echo "‚è≥ Waiting 30 seconds for container to stabilize..."
          sleep 30
          echo "üëÄ Checking container status..."
          if sudo docker compose -f ${{ env.DEPLOY_PATH }}/docker-compose.yml -f ${{ env.DEPLOY_PATH }}/docker-compose.override.yml ps | grep -q "Up"; then
            echo "‚úÖ Container is running successfully"
          else
            echo "‚ùå Container failed to start"
            sudo docker compose -f ${{ env.DEPLOY_PATH }}/docker-compose.yml -f ${{ env.DEPLOY_PATH }}/docker-compose.override.yml logs
            exit 1
          fi
